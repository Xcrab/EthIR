import rbr_rule
import os
from timeit import default_timer as dtimer

'''
This module translate the RBR generated by EthIR to SACO RBR.
It receives a list with rbr_rule instances.
'''

global pattern
pattern = ["PUSH1",
                   "DUP2",
                   "PUSH1",
                   "AND",
                   "ISZERO",
                   "PUSH2",
                   "MUL",
                   "SUB",
                   "AND",
                   "PUSH1",
                   "SWAP1",
                   "DIV"]

def rbr2c(rbr,execution,cname):
    begin = dtimer()
    
    # new_rules = []
    # for rules in rbr:
    #     for rule in rules:
    #         new_rule = process_rule_saco(rule)
    #         new_rules.append(new_rule)

    # write(new_rules,execution,cname)
    end = dtimer()
    print("C RBR: "+str(end-begin)+"s")
    print("*************************************************************")


def write(rules,execution,cname):
    
    # if "costabs" not in os.listdir("/tmp/"):
    #     os.mkdir("/tmp/costabs/")

    if execution == None:
        name = "/tmp/costabs/rbr_c.rbr"
    elif cname == None:
        name = "/tmp/costabs/rbr"+str(execution)+"_c.rbr"
    else:
        name = "/tmp/costabs/"+cname+"_c.rbr"
    with open(name,"w") as f:
        for rule in rules:
            f.write(rule+"\n")

    f.close()
